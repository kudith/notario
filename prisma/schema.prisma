generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String   @unique
  password    String?  // Optional if using external providers
  publicKey   String   @unique // For verifying the user's digital signature
  algorithm   String   @default("RSA") // or "ECDSA"
  role        String   @default("user") // optional: for future RBAC
  institution String?  // e.g., name of the university
  verified    Boolean  @default(false) // for email or identity verification
  avatarUrl   String?  // URL to Cloudinary-hosted avatar
  cloudinaryId String? // Cloudinary public_id for avatar management
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  documents   Document[]  // Relation to documents they signed
  accounts    Account[]
  sessions    Session[]
}

model Document {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  fileName      String
  fileHash      String   // Original document hash
  signedFileHash String?  // Signed document hash (with QR code)
  signature     String   // digital signature string
  algorithm     String   @default("RSA")
  publicKey     String
  certificateId String   @unique
  qrCodeUrl     String?
  signedPdfUrl  String?  // URL to the signed PDF with QR code
  
  // Google Drive fields
  driveFileId   String?  // Google Drive file ID
  driveViewUrl  String?  // Google Drive webViewLink
  driveDownloadUrl String? // Google Drive webContentLink
  
  metadata      Json?
  timestamp     DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
